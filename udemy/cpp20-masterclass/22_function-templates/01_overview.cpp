#include <iostream>
#include <string>

/*
    Blueprints for functions, often used with multiple function overloads that use the same code.
    We do not want to write the same code over and over, so this allows a way around that.
    A template is not real C++ code... the compiler generates the real C++ code from the blueprint.
    The C++ code generated by the compiler is called a template instance.
    A template instance will be reused when a similar function call is issued.
*/

// Function template declaration
template <typename T> T maximum(T a, T b);

int main()
{
    int a {10};
    int b {23};

    double c {34.7};
    double d {23.4};

    std::string e {"hello"};
    std::string f {"world"};

    // Template instance for integer
    std::cout << "max(integer): " << maximum(a, b) << std::endl;

    // Template instance for double
    std::cout << "max(double): " << maximum(c, d) << std::endl;

    // Template instance for string
    std::cout << "max(string): " << maximum(e, f) << std::endl;

    return 0;
}

// Function template definition
template <typename T> T maximum(T a, T b)
{   
    // a and b must support the > operator, otherwise an error is thrown
    return (a > b) ? a : b;
}